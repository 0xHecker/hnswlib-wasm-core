let hnswlib;
let __tla = (async () => {
  hnswlib = (() => {
    return async function(moduleArg = {}) {
      var _a, _b, _c;
      var moduleRtn;
      var Module = moduleArg;
      var ENVIRONMENT_IS_WEB = typeof window == "object";
      var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != "undefined";
      var ENVIRONMENT_IS_NODE = typeof process == "object" && ((_a = process.versions) == null ? void 0 : _a.node) && process.type != "renderer";
      var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
      if (ENVIRONMENT_IS_NODE) {
        const { createRequire } = await import("./__vite-browser-external-4ed993c7.js");
        var require2 = createRequire(import.meta.url);
      }
      var thisProgram = "./this.program";
      var _scriptName = import.meta.url;
      var scriptDirectory = "";
      var readBinary;
      if (ENVIRONMENT_IS_NODE) {
        const isNode = typeof process == "object" && ((_b = process.versions) == null ? void 0 : _b.node) && process.type != "renderer";
        if (!isNode)
          throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
        var nodeVersion = process.versions.node;
        var numericVersion = nodeVersion.split(".").slice(0, 3);
        numericVersion = numericVersion[0] * 1e4 + numericVersion[1] * 100 + numericVersion[2].split("-")[0] * 1;
        if (numericVersion < 16e4) {
          throw new Error("This emscripten-generated code requires node v16.0.0 (detected v" + nodeVersion + ")");
        }
        var fs = require2("fs");
        if (_scriptName.startsWith("file:")) {
          scriptDirectory = require2("path").dirname(require2("url").fileURLToPath(_scriptName)) + "/";
        }
        readBinary = (filename) => {
          filename = isFileURI(filename) ? new URL(filename) : filename;
          var ret = fs.readFileSync(filename);
          assert(Buffer.isBuffer(ret));
          return ret;
        };
        if (process.argv.length > 1) {
          thisProgram = process.argv[1].replace(/\\/g, "/");
        }
        process.argv.slice(2);
      } else if (ENVIRONMENT_IS_SHELL) {
        const isNode = typeof process == "object" && ((_c = process.versions) == null ? void 0 : _c.node) && process.type != "renderer";
        if (isNode || typeof window == "object" || typeof WorkerGlobalScope != "undefined")
          throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
      } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        try {
          scriptDirectory = new URL(".", _scriptName).href;
        } catch {
        }
        if (!(typeof window == "object" || typeof WorkerGlobalScope != "undefined"))
          throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
      } else {
        throw new Error("environment detection error");
      }
      var out = console.log.bind(console);
      var err = console.error.bind(console);
      assert(!ENVIRONMENT_IS_WORKER, "worker environment detected but not enabled at build time.  Add `worker` to `-sENVIRONMENT` to enable.");
      assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");
      var wasmBinary;
      if (typeof WebAssembly != "object") {
        err("no native wasm support detected");
      }
      var ABORT = false;
      function assert(condition, text) {
        if (!condition) {
          abort("Assertion failed" + (text ? ": " + text : ""));
        }
      }
      var isFileURI = (filename) => filename.startsWith("file://");
      function writeStackCookie() {
        var max = _emscripten_stack_get_end();
        assert((max & 3) == 0);
        if (max == 0) {
          max += 4;
        }
        HEAPU32[max >> 2] = 34821223;
        HEAPU32[max + 4 >> 2] = 2310721022;
        HEAPU32[0 >> 2] = 1668509029;
      }
      function checkStackCookie() {
        if (ABORT)
          return;
        var max = _emscripten_stack_get_end();
        if (max == 0) {
          max += 4;
        }
        var cookie1 = HEAPU32[max >> 2];
        var cookie2 = HEAPU32[max + 4 >> 2];
        if (cookie1 != 34821223 || cookie2 != 2310721022) {
          abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
        }
        if (HEAPU32[0 >> 2] != 1668509029) {
          abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
        }
      }
      (() => {
        var h16 = new Int16Array(1);
        var h8 = new Int8Array(h16.buffer);
        h16[0] = 25459;
        if (h8[0] !== 115 || h8[1] !== 99)
          throw "Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)";
      })();
      function consumedModuleProp(prop) {
        if (!Object.getOwnPropertyDescriptor(Module, prop)) {
          Object.defineProperty(Module, prop, {
            configurable: true,
            set() {
              abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`);
            }
          });
        }
      }
      function makeInvalidEarlyAccess(name) {
        return () => assert(false, `call to '${name}' via reference taken before Wasm module initialization`);
      }
      function ignoredModuleProp(prop) {
        if (Object.getOwnPropertyDescriptor(Module, prop)) {
          abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
        }
      }
      function isExportedByForceFilesystem(name) {
        return name === "FS_createPath" || name === "FS_createDataFile" || name === "FS_createPreloadedFile" || name === "FS_unlink" || name === "addRunDependency" || name === "FS_createLazyFile" || name === "FS_createDevice" || name === "removeRunDependency";
      }
      function hookGlobalSymbolAccess(sym, func) {
        if (typeof globalThis != "undefined" && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
          Object.defineProperty(globalThis, sym, {
            configurable: true,
            get() {
              func();
              return void 0;
            }
          });
        }
      }
      function missingGlobal(sym, msg) {
        hookGlobalSymbolAccess(sym, () => {
          warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
        });
      }
      missingGlobal("buffer", "Please use HEAP8.buffer or wasmMemory.buffer");
      missingGlobal("asm", "Please use wasmExports instead");
      function missingLibrarySymbol(sym) {
        hookGlobalSymbolAccess(sym, () => {
          var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
          var librarySymbol = sym;
          if (!librarySymbol.startsWith("_")) {
            librarySymbol = "$" + sym;
          }
          msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
          if (isExportedByForceFilesystem(sym)) {
            msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
          }
          warnOnce(msg);
        });
        unexportedRuntimeSymbol(sym);
      }
      function unexportedRuntimeSymbol(sym) {
        if (!Object.getOwnPropertyDescriptor(Module, sym)) {
          Object.defineProperty(Module, sym, {
            configurable: true,
            get() {
              var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
              if (isExportedByForceFilesystem(sym)) {
                msg += ". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you";
              }
              abort(msg);
            }
          });
        }
      }
      var readyPromiseResolve, readyPromiseReject;
      var wasmMemory;
      var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
      var HEAP64, HEAPU64;
      var runtimeInitialized = false;
      function updateMemoryViews() {
        var b = wasmMemory.buffer;
        HEAP8 = new Int8Array(b);
        HEAP16 = new Int16Array(b);
        HEAPU8 = new Uint8Array(b);
        HEAPU16 = new Uint16Array(b);
        HEAP32 = new Int32Array(b);
        HEAPU32 = new Uint32Array(b);
        HEAPF32 = new Float32Array(b);
        HEAPF64 = new Float64Array(b);
        HEAP64 = new BigInt64Array(b);
        HEAPU64 = new BigUint64Array(b);
      }
      assert(typeof Int32Array != "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray != void 0 && Int32Array.prototype.set != void 0, "JS engine does not provide full typed array support");
      function preRun() {
        if (Module["preRun"]) {
          if (typeof Module["preRun"] == "function")
            Module["preRun"] = [
              Module["preRun"]
            ];
          while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift());
          }
        }
        consumedModuleProp("preRun");
        callRuntimeCallbacks(onPreRuns);
      }
      function initRuntime() {
        assert(!runtimeInitialized);
        runtimeInitialized = true;
        checkStackCookie();
        wasmExports["__wasm_call_ctors"]();
      }
      function postRun() {
        checkStackCookie();
        if (Module["postRun"]) {
          if (typeof Module["postRun"] == "function")
            Module["postRun"] = [
              Module["postRun"]
            ];
          while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift());
          }
        }
        consumedModuleProp("postRun");
        callRuntimeCallbacks(onPostRuns);
      }
      var runDependencies = 0;
      var dependenciesFulfilled = null;
      var runDependencyTracking = {};
      var runDependencyWatcher = null;
      function addRunDependency(id) {
        var _a2;
        runDependencies++;
        (_a2 = Module["monitorRunDependencies"]) == null ? void 0 : _a2.call(Module, runDependencies);
        if (id) {
          assert(!runDependencyTracking[id]);
          runDependencyTracking[id] = 1;
          if (runDependencyWatcher === null && typeof setInterval != "undefined") {
            runDependencyWatcher = setInterval(() => {
              if (ABORT) {
                clearInterval(runDependencyWatcher);
                runDependencyWatcher = null;
                return;
              }
              var shown = false;
              for (var dep in runDependencyTracking) {
                if (!shown) {
                  shown = true;
                  err("still waiting on run dependencies:");
                }
                err(`dependency: ${dep}`);
              }
              if (shown) {
                err("(end of list)");
              }
            }, 1e4);
          }
        } else {
          err("warning: run dependency added without ID");
        }
      }
      function removeRunDependency(id) {
        var _a2;
        runDependencies--;
        (_a2 = Module["monitorRunDependencies"]) == null ? void 0 : _a2.call(Module, runDependencies);
        if (id) {
          assert(runDependencyTracking[id]);
          delete runDependencyTracking[id];
        } else {
          err("warning: run dependency removed without ID");
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
          }
        }
      }
      function abort(what) {
        var _a2;
        (_a2 = Module["onAbort"]) == null ? void 0 : _a2.call(Module, what);
        what = "Aborted(" + what + ")";
        err(what);
        ABORT = true;
        if (runtimeInitialized) {
          ___trap();
        }
        var e = new WebAssembly.RuntimeError(what);
        readyPromiseReject == null ? void 0 : readyPromiseReject(e);
        throw e;
      }
      var FS = {
        error() {
          abort("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM");
        },
        init() {
          FS.error();
        },
        createDataFile() {
          FS.error();
        },
        createPreloadedFile() {
          FS.error();
        },
        createLazyFile() {
          FS.error();
        },
        open() {
          FS.error();
        },
        mkdev() {
          FS.error();
        },
        registerDevice() {
          FS.error();
        },
        analyzePath() {
          FS.error();
        },
        ErrnoError() {
          FS.error();
        }
      };
      function createExportWrapper(name, nargs) {
        return (...args) => {
          assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
          var f = wasmExports[name];
          assert(f, `exported native function \`${name}\` not found`);
          assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
          return f(...args);
        };
      }
      var wasmBinaryFile;
      function findWasmBinary() {
        return base64Decode("");
      }
      function getBinarySync(file) {
        if (ArrayBuffer.isView(file)) {
          return file;
        }
        if (file == wasmBinaryFile && wasmBinary) {
          return new Uint8Array(wasmBinary);
        }
        if (readBinary) {
          return readBinary(file);
        }
        throw "both async and sync fetching of the wasm failed";
      }
      async function getWasmBinary(binaryFile) {
        return getBinarySync(binaryFile);
      }
      async function instantiateArrayBuffer(binaryFile, imports) {
        try {
          var binary = await getWasmBinary(binaryFile);
          var instance = await WebAssembly.instantiate(binary, imports);
          return instance;
        } catch (reason) {
          err(`failed to asynchronously prepare wasm: ${reason}`);
          if (isFileURI(wasmBinaryFile)) {
            err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
          }
          abort(reason);
        }
      }
      async function instantiateAsync(binary, binaryFile, imports) {
        return instantiateArrayBuffer(binaryFile, imports);
      }
      function getWasmImports() {
        return {
          "env": wasmImports,
          "wasi_snapshot_preview1": wasmImports
        };
      }
      async function createWasm() {
        function receiveInstance(instance, module) {
          wasmExports = instance.exports;
          wasmMemory = wasmExports["memory"];
          assert(wasmMemory, "memory not found in wasm exports");
          updateMemoryViews();
          wasmTable = wasmExports["__indirect_function_table"];
          assert(wasmTable, "table not found in wasm exports");
          ___cpp_exception = wasmExports["__cpp_exception"];
          assignWasmExports(wasmExports);
          removeRunDependency("wasm-instantiate");
          return wasmExports;
        }
        addRunDependency("wasm-instantiate");
        var trueModule = Module;
        function receiveInstantiationResult(result2) {
          assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
          trueModule = null;
          return receiveInstance(result2["instance"]);
        }
        var info = getWasmImports();
        if (Module["instantiateWasm"]) {
          return new Promise((resolve, reject) => {
            try {
              Module["instantiateWasm"](info, (mod, inst) => {
                resolve(receiveInstance(mod, inst));
              });
            } catch (e) {
              err(`Module.instantiateWasm callback failed with error: ${e}`);
              reject(e);
            }
          });
        }
        wasmBinaryFile ?? (wasmBinaryFile = findWasmBinary());
        var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
        var exports = receiveInstantiationResult(result);
        return exports;
      }
      var callRuntimeCallbacks = (callbacks) => {
        while (callbacks.length > 0) {
          callbacks.shift()(Module);
        }
      };
      var onPostRuns = [];
      var addOnPostRun = (cb) => onPostRuns.push(cb);
      var onPreRuns = [];
      var addOnPreRun = (cb) => onPreRuns.push(cb);
      var base64Decode = (b64) => {
        if (ENVIRONMENT_IS_NODE) {
          var buf = Buffer.from(b64, "base64");
          return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
        }
        assert(b64.length % 4 == 0);
        var b1, b2, i2 = 0, j = 0, bLength = b64.length;
        var output = new Uint8Array((bLength * 3 >> 2) - (b64[bLength - 2] == "=") - (b64[bLength - 1] == "="));
        for (; i2 < bLength; i2 += 4, j += 3) {
          b1 = base64ReverseLookup[b64.charCodeAt(i2 + 1)];
          b2 = base64ReverseLookup[b64.charCodeAt(i2 + 2)];
          output[j] = base64ReverseLookup[b64.charCodeAt(i2)] << 2 | b1 >> 4;
          output[j + 1] = b1 << 4 | b2 >> 2;
          output[j + 2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i2 + 3)];
        }
        return output;
      };
      var ptrToString = (ptr) => {
        assert(typeof ptr === "number");
        ptr >>>= 0;
        return "0x" + ptr.toString(16).padStart(8, "0");
      };
      var warnOnce = (text) => {
        warnOnce.shown || (warnOnce.shown = {});
        if (!warnOnce.shown[text]) {
          warnOnce.shown[text] = 1;
          if (ENVIRONMENT_IS_NODE)
            text = "warning: " + text;
          err(text);
        }
      };
      var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder() : void 0;
      var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
        var endIdx = idx + maxBytesToRead;
        var endPtr = idx;
        while (heapOrArray[endPtr] && !(endPtr >= endIdx))
          ++endPtr;
        if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
          return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
        }
        var str = "";
        while (idx < endPtr) {
          var u0 = heapOrArray[idx++];
          if (!(u0 & 128)) {
            str += String.fromCharCode(u0);
            continue;
          }
          var u1 = heapOrArray[idx++] & 63;
          if ((u0 & 224) == 192) {
            str += String.fromCharCode((u0 & 31) << 6 | u1);
            continue;
          }
          var u2 = heapOrArray[idx++] & 63;
          if ((u0 & 240) == 224) {
            u0 = (u0 & 15) << 12 | u1 << 6 | u2;
          } else {
            if ((u0 & 248) != 240)
              warnOnce("Invalid UTF-8 leading byte " + ptrToString(u0) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
          }
          if (u0 < 65536) {
            str += String.fromCharCode(u0);
          } else {
            var ch = u0 - 65536;
            str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
          }
        }
        return str;
      };
      var UTF8ToString = (ptr, maxBytesToRead) => {
        assert(typeof ptr == "number", `UTF8ToString expects a number (got ${typeof ptr})`);
        return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
      };
      var ___assert_fail = (condition, filename, line, func) => abort(`Assertion failed: ${UTF8ToString(condition)}, at: ` + [
        filename ? UTF8ToString(filename) : "unknown filename",
        line,
        func ? UTF8ToString(func) : "unknown function"
      ]);
      var getCppExceptionTag = () => ___cpp_exception;
      var getCppExceptionThrownObjectFromWebAssemblyException = (ex) => {
        var unwind_header = ex.getArg(getCppExceptionTag(), 0);
        return ___thrown_object_from_unwind_exception(unwind_header);
      };
      var stackSave = () => _emscripten_stack_get_current();
      var stackRestore = (val) => __emscripten_stack_restore(val);
      var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
      var getExceptionMessageCommon = (ptr) => {
        var sp = stackSave();
        var type_addr_addr = stackAlloc(4);
        var message_addr_addr = stackAlloc(4);
        ___get_exception_message(ptr, type_addr_addr, message_addr_addr);
        var type_addr = HEAPU32[type_addr_addr >> 2];
        var message_addr = HEAPU32[message_addr_addr >> 2];
        var type = UTF8ToString(type_addr);
        _free(type_addr);
        var message;
        if (message_addr) {
          message = UTF8ToString(message_addr);
          _free(message_addr);
        }
        stackRestore(sp);
        return [
          type,
          message
        ];
      };
      var getExceptionMessage = (ex) => {
        var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);
        return getExceptionMessageCommon(ptr);
      };
      var ___throw_exception_with_stack_trace = (ex) => {
        var e = new WebAssembly.Exception(getCppExceptionTag(), [
          ex
        ], {
          traceStack: true
        });
        e.message = getExceptionMessage(e);
        throw e;
      };
      var __abort_js = () => abort("native code called abort()");
      var AsciiToString = (ptr) => {
        var str = "";
        while (1) {
          var ch = HEAPU8[ptr++];
          if (!ch)
            return str;
          str += String.fromCharCode(ch);
        }
      };
      var awaitingDependencies = {};
      var registeredTypes = {};
      var typeDependencies = {};
      var BindingError = class BindingError extends Error {
        constructor(message) {
          super(message);
          this.name = "BindingError";
        }
      };
      var throwBindingError = (message) => {
        throw new BindingError(message);
      };
      function sharedRegisterType(rawType, registeredInstance, options = {}) {
        var name = registeredInstance.name;
        if (!rawType) {
          throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
        }
        if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
            return;
          } else {
            throwBindingError(`Cannot register type '${name}' twice`);
          }
        }
        registeredTypes[rawType] = registeredInstance;
        delete typeDependencies[rawType];
        if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach((cb) => cb());
        }
      }
      function registerType(rawType, registeredInstance, options = {}) {
        if (registeredInstance.argPackAdvance === void 0) {
          throw new TypeError("registerType registeredInstance requires argPackAdvance");
        }
        return sharedRegisterType(rawType, registeredInstance, options);
      }
      var integerReadValueFromPointer = (name, width, signed) => {
        switch (width) {
          case 1:
            return signed ? (pointer) => HEAP8[pointer] : (pointer) => HEAPU8[pointer];
          case 2:
            return signed ? (pointer) => HEAP16[pointer >> 1] : (pointer) => HEAPU16[pointer >> 1];
          case 4:
            return signed ? (pointer) => HEAP32[pointer >> 2] : (pointer) => HEAPU32[pointer >> 2];
          case 8:
            return signed ? (pointer) => HEAP64[pointer >> 3] : (pointer) => HEAPU64[pointer >> 3];
          default:
            throw new TypeError(`invalid integer width (${width}): ${name}`);
        }
      };
      var embindRepr = (v) => {
        if (v === null) {
          return "null";
        }
        var t = typeof v;
        if (t === "object" || t === "array" || t === "function") {
          return v.toString();
        } else {
          return "" + v;
        }
      };
      var assertIntegerRange = (typeName, value, minRange, maxRange) => {
        if (value < minRange || value > maxRange) {
          throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${typeName}", which is outside the valid range [${minRange}, ${maxRange}]!`);
        }
      };
      var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {
        name = AsciiToString(name);
        const isUnsignedType = minRange === 0n;
        let fromWireType = (value) => value;
        if (isUnsignedType) {
          const bitSize = size * 8;
          fromWireType = (value) => {
            return BigInt.asUintN(bitSize, value);
          };
          maxRange = fromWireType(maxRange);
        }
        registerType(primitiveType, {
          name,
          "fromWireType": fromWireType,
          "toWireType": (destructors, value) => {
            if (typeof value == "number") {
              value = BigInt(value);
            } else if (typeof value != "bigint") {
              throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${this.name}`);
            }
            assertIntegerRange(name, value, minRange, maxRange);
            return value;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": integerReadValueFromPointer(name, size, !isUnsignedType),
          destructorFunction: null
        });
      };
      var GenericWireTypeSize = 8;
      var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
        name = AsciiToString(name);
        registerType(rawType, {
          name,
          "fromWireType": function(wt) {
            return !!wt;
          },
          "toWireType": function(destructors, o) {
            return o ? trueValue : falseValue;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": function(pointer) {
            return this["fromWireType"](HEAPU8[pointer]);
          },
          destructorFunction: null
        });
      };
      var shallowCopyInternalPointer = (o) => {
        return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType
        };
      };
      var throwInstanceAlreadyDeleted = (obj) => {
        function getInstanceTypeName(handle) {
          return handle.$$.ptrType.registeredClass.name;
        }
        throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
      };
      var finalizationRegistry = false;
      var detachFinalizer = (handle) => {
      };
      var runDestructor = ($$) => {
        if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
        } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
        }
      };
      var releaseClassHandle = ($$) => {
        $$.count.value -= 1;
        var toDelete = 0 === $$.count.value;
        if (toDelete) {
          runDestructor($$);
        }
      };
      var downcastPointer = (ptr, ptrClass, desiredClass) => {
        if (ptrClass === desiredClass) {
          return ptr;
        }
        if (void 0 === desiredClass.baseClass) {
          return null;
        }
        var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
        if (rv === null) {
          return null;
        }
        return desiredClass.downcast(rv);
      };
      var registeredPointers = {};
      var registeredInstances = {};
      var getBasestPointer = (class_, ptr) => {
        if (ptr === void 0) {
          throwBindingError("ptr should not be undefined");
        }
        while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
        }
        return ptr;
      };
      var getInheritedInstance = (class_, ptr) => {
        ptr = getBasestPointer(class_, ptr);
        return registeredInstances[ptr];
      };
      var InternalError = class InternalError extends Error {
        constructor(message) {
          super(message);
          this.name = "InternalError";
        }
      };
      var throwInternalError = (message) => {
        throw new InternalError(message);
      };
      var makeClassHandle = (prototype, record) => {
        if (!record.ptrType || !record.ptr) {
          throwInternalError("makeClassHandle requires ptr and ptrType");
        }
        var hasSmartPtrType = !!record.smartPtrType;
        var hasSmartPtr = !!record.smartPtr;
        if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError("Both smartPtrType and smartPtr must be specified");
        }
        record.count = {
          value: 1
        };
        return attachFinalizer(Object.create(prototype, {
          $$: {
            value: record,
            writable: true
          }
        }));
      };
      function RegisteredPointer_fromWireType(ptr) {
        var rawPointer = this.getPointee(ptr);
        if (!rawPointer) {
          this.destructor(ptr);
          return null;
        }
        var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
        if (void 0 !== registeredInstance) {
          if (0 === registeredInstance.$$.count.value) {
            registeredInstance.$$.ptr = rawPointer;
            registeredInstance.$$.smartPtr = ptr;
            return registeredInstance["clone"]();
          } else {
            var rv = registeredInstance["clone"]();
            this.destructor(ptr);
            return rv;
          }
        }
        function makeDefaultHandle() {
          if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
              ptrType: this.pointeeType,
              ptr: rawPointer,
              smartPtrType: this,
              smartPtr: ptr
            });
          } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
              ptrType: this,
              ptr
            });
          }
        }
        var actualType = this.registeredClass.getActualType(rawPointer);
        var registeredPointerRecord = registeredPointers[actualType];
        if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
        }
        var toType;
        if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
        } else {
          toType = registeredPointerRecord.pointerType;
        }
        var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
        if (dp === null) {
          return makeDefaultHandle.call(this);
        }
        if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr
          });
        } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp
          });
        }
      }
      var attachFinalizer = (handle) => {
        if ("undefined" === typeof FinalizationRegistry) {
          attachFinalizer = (handle2) => handle2;
          return handle;
        }
        finalizationRegistry = new FinalizationRegistry((info) => {
          console.warn(info.leakWarning);
          releaseClassHandle(info.$$);
        });
        attachFinalizer = (handle2) => {
          var $$ = handle2.$$;
          var hasSmartPtr = !!$$.smartPtr;
          if (hasSmartPtr) {
            var info = {
              $$
            };
            var cls = $$.ptrType.registeredClass;
            var err2 = new Error(`Embind found a leaked C++ instance ${cls.name} <${ptrToString($$.ptr)}>.
We'll free it automatically in this case, but this functionality is not reliable across various environments.
Make sure to invoke .delete() manually once you're done with the instance instead.
Originally allocated`);
            if ("captureStackTrace" in Error) {
              Error.captureStackTrace(err2, RegisteredPointer_fromWireType);
            }
            info.leakWarning = err2.stack.replace(/^Error: /, "");
            finalizationRegistry.register(handle2, info, handle2);
          }
          return handle2;
        };
        detachFinalizer = (handle2) => finalizationRegistry.unregister(handle2);
        return attachFinalizer(handle);
      };
      var deletionQueue = [];
      var flushPendingDeletes = () => {
        while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj["delete"]();
        }
      };
      var delayFunction;
      var init_ClassHandle = () => {
        let proto = ClassHandle.prototype;
        Object.assign(proto, {
          "isAliasOf"(other) {
            if (!(this instanceof ClassHandle)) {
              return false;
            }
            if (!(other instanceof ClassHandle)) {
              return false;
            }
            var leftClass = this.$$.ptrType.registeredClass;
            var left = this.$$.ptr;
            other.$$ = other.$$;
            var rightClass = other.$$.ptrType.registeredClass;
            var right = other.$$.ptr;
            while (leftClass.baseClass) {
              left = leftClass.upcast(left);
              leftClass = leftClass.baseClass;
            }
            while (rightClass.baseClass) {
              right = rightClass.upcast(right);
              rightClass = rightClass.baseClass;
            }
            return leftClass === rightClass && left === right;
          },
          "clone"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.preservePointerOnDelete) {
              this.$$.count.value += 1;
              return this;
            } else {
              var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
                $$: {
                  value: shallowCopyInternalPointer(this.$$)
                }
              }));
              clone.$$.count.value += 1;
              clone.$$.deleteScheduled = false;
              return clone;
            }
          },
          "delete"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError("Object already scheduled for deletion");
            }
            detachFinalizer(this);
            releaseClassHandle(this.$$);
            if (!this.$$.preservePointerOnDelete) {
              this.$$.smartPtr = void 0;
              this.$$.ptr = void 0;
            }
          },
          "isDeleted"() {
            return !this.$$.ptr;
          },
          "deleteLater"() {
            if (!this.$$.ptr) {
              throwInstanceAlreadyDeleted(this);
            }
            if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
              throwBindingError("Object already scheduled for deletion");
            }
            deletionQueue.push(this);
            if (deletionQueue.length === 1 && delayFunction) {
              delayFunction(flushPendingDeletes);
            }
            this.$$.deleteScheduled = true;
            return this;
          }
        });
        const symbolDispose = Symbol.dispose;
        if (symbolDispose) {
          proto[symbolDispose] = proto["delete"];
        }
      };
      function ClassHandle() {
      }
      var createNamedFunction = (name, func) => Object.defineProperty(func, "name", {
        value: name
      });
      var ensureOverloadTable = (proto, methodName, humanName) => {
        if (void 0 === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          proto[methodName] = function(...args) {
            if (!proto[methodName].overloadTable.hasOwnProperty(args.length)) {
              throwBindingError(`Function '${humanName}' called with an invalid number of arguments (${args.length}) - expects one of (${proto[methodName].overloadTable})!`);
            }
            return proto[methodName].overloadTable[args.length].apply(this, args);
          };
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
        }
      };
      var exposePublicSymbol = (name, value, numArguments) => {
        if (Module.hasOwnProperty(name)) {
          if (void 0 === numArguments || void 0 !== Module[name].overloadTable && void 0 !== Module[name].overloadTable[numArguments]) {
            throwBindingError(`Cannot register public name '${name}' twice`);
          }
          ensureOverloadTable(Module, name, name);
          if (Module[name].overloadTable.hasOwnProperty(numArguments)) {
            throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${numArguments})!`);
          }
          Module[name].overloadTable[numArguments] = value;
        } else {
          Module[name] = value;
          Module[name].argCount = numArguments;
        }
      };
      var char_0 = 48;
      var char_9 = 57;
      var makeLegalFunctionName = (name) => {
        assert(typeof name === "string");
        name = name.replace(/[^a-zA-Z0-9_]/g, "$");
        var f = name.charCodeAt(0);
        if (f >= char_0 && f <= char_9) {
          return `_${name}`;
        }
        return name;
      };
      function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
        this.name = name;
        this.constructor = constructor;
        this.instancePrototype = instancePrototype;
        this.rawDestructor = rawDestructor;
        this.baseClass = baseClass;
        this.getActualType = getActualType;
        this.upcast = upcast;
        this.downcast = downcast;
        this.pureVirtualFunctions = [];
      }
      var upcastPointer = (ptr, ptrClass, desiredClass) => {
        while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
            throwBindingError(`Expected null or instance of ${desiredClass.name}, got an instance of ${ptrClass.name}`);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
        }
        return ptr;
      };
      function constNoSmartPtrRawPointerToWireType(destructors, handle) {
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
          return 0;
        }
        if (!handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
        return ptr;
      }
      function genericPointerToWireType(destructors, handle) {
        var ptr;
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
          if (this.isSmartPointer) {
            ptr = this.rawConstructor();
            if (destructors !== null) {
              destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
          } else {
            return 0;
          }
        }
        if (!handle || !handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
        if (this.isSmartPointer) {
          if (void 0 === handle.$$.smartPtr) {
            throwBindingError("Passing raw pointer to smart pointer is illegal");
          }
          switch (this.sharingPolicy) {
            case 0:
              if (handle.$$.smartPtrType === this) {
                ptr = handle.$$.smartPtr;
              } else {
                throwBindingError(`Cannot convert argument of type ${handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name} to parameter type ${this.name}`);
              }
              break;
            case 1:
              ptr = handle.$$.smartPtr;
              break;
            case 2:
              if (handle.$$.smartPtrType === this) {
                ptr = handle.$$.smartPtr;
              } else {
                var clonedHandle = handle["clone"]();
                ptr = this.rawShare(ptr, Emval.toHandle(() => clonedHandle["delete"]()));
                if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
                }
              }
              break;
            default:
              throwBindingError("Unsupporting sharing policy");
          }
        }
        return ptr;
      }
      function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
        if (handle === null) {
          if (this.isReference) {
            throwBindingError(`null is not a valid ${this.name}`);
          }
          return 0;
        }
        if (!handle.$$) {
          throwBindingError(`Cannot pass "${embindRepr(handle)}" as a ${this.name}`);
        }
        if (!handle.$$.ptr) {
          throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);
        }
        if (handle.$$.ptrType.isConst) {
          throwBindingError(`Cannot convert argument of type ${handle.$$.ptrType.name} to parameter type ${this.name}`);
        }
        var handleClass = handle.$$.ptrType.registeredClass;
        var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
        return ptr;
      }
      function readPointer(pointer) {
        return this["fromWireType"](HEAPU32[pointer >> 2]);
      }
      var init_RegisteredPointer = () => {
        Object.assign(RegisteredPointer.prototype, {
          getPointee(ptr) {
            if (this.rawGetPointee) {
              ptr = this.rawGetPointee(ptr);
            }
            return ptr;
          },
          destructor(ptr) {
            var _a2;
            (_a2 = this.rawDestructor) == null ? void 0 : _a2.call(this, ptr);
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": readPointer,
          "fromWireType": RegisteredPointer_fromWireType
        });
      };
      function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
        this.name = name;
        this.registeredClass = registeredClass;
        this.isReference = isReference;
        this.isConst = isConst;
        this.isSmartPointer = isSmartPointer;
        this.pointeeType = pointeeType;
        this.sharingPolicy = sharingPolicy;
        this.rawGetPointee = rawGetPointee;
        this.rawConstructor = rawConstructor;
        this.rawShare = rawShare;
        this.rawDestructor = rawDestructor;
        if (!isSmartPointer && registeredClass.baseClass === void 0) {
          if (isConst) {
            this["toWireType"] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
          } else {
            this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
          }
        } else {
          this["toWireType"] = genericPointerToWireType;
        }
      }
      var replacePublicSymbol = (name, value, numArguments) => {
        if (!Module.hasOwnProperty(name)) {
          throwInternalError("Replacing nonexistent public symbol");
        }
        if (void 0 !== Module[name].overloadTable && void 0 !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
        } else {
          Module[name] = value;
          Module[name].argCount = numArguments;
        }
      };
      var wasmTableMirror = [];
      var wasmTable;
      var getWasmTableEntry = (funcPtr) => {
        var func = wasmTableMirror[funcPtr];
        if (!func) {
          wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
        }
        assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
        return func;
      };
      var embind__requireFunction = (signature, rawFunction, isAsync = false) => {
        assert(!isAsync, "Async bindings are only supported with JSPI.");
        signature = AsciiToString(signature);
        function makeDynCaller() {
          var rtn = getWasmTableEntry(rawFunction);
          return rtn;
        }
        var fp = makeDynCaller();
        if (typeof fp != "function") {
          throwBindingError(`unknown function pointer with signature ${signature}: ${rawFunction}`);
        }
        return fp;
      };
      class UnboundTypeError extends Error {
      }
      var getTypeName = (type) => {
        var ptr = ___getTypeName(type);
        var rv = AsciiToString(ptr);
        _free(ptr);
        return rv;
      };
      var throwUnboundTypeError = (message, types) => {
        var unboundTypes = [];
        var seen = {};
        function visit(type) {
          if (seen[type]) {
            return;
          }
          if (registeredTypes[type]) {
            return;
          }
          if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
          }
          unboundTypes.push(type);
          seen[type] = true;
        }
        types.forEach(visit);
        throw new UnboundTypeError(`${message}: ` + unboundTypes.map(getTypeName).join([
          ", "
        ]));
      };
      var whenDependentTypesAreResolved = (myTypes, dependentTypes, getTypeConverters) => {
        myTypes.forEach((type) => typeDependencies[type] = dependentTypes);
        function onComplete(typeConverters2) {
          var myTypeConverters = getTypeConverters(typeConverters2);
          if (myTypeConverters.length !== myTypes.length) {
            throwInternalError("Mismatched type converter count");
          }
          for (var i2 = 0; i2 < myTypes.length; ++i2) {
            registerType(myTypes[i2], myTypeConverters[i2]);
          }
        }
        var typeConverters = new Array(dependentTypes.length);
        var unregisteredTypes = [];
        var registered = 0;
        dependentTypes.forEach((dt, i2) => {
          if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i2] = registeredTypes[dt];
          } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
              awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(() => {
              typeConverters[i2] = registeredTypes[dt];
              ++registered;
              if (registered === unregisteredTypes.length) {
                onComplete(typeConverters);
              }
            });
          }
        });
        if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
        }
      };
      var __embind_register_class = (rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) => {
        name = AsciiToString(name);
        getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
        upcast && (upcast = embind__requireFunction(upcastSignature, upcast));
        downcast && (downcast = embind__requireFunction(downcastSignature, downcast));
        rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
        var legalFunctionName = makeLegalFunctionName(name);
        exposePublicSymbol(legalFunctionName, function() {
          throwUnboundTypeError(`Cannot construct ${name} due to unbound types`, [
            baseClassRawType
          ]);
        });
        whenDependentTypesAreResolved([
          rawType,
          rawPointerType,
          rawConstPointerType
        ], baseClassRawType ? [
          baseClassRawType
        ] : [], (base) => {
          var _a2;
          base = base[0];
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
          var constructor = createNamedFunction(name, function(...args) {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError(`Use 'new' to construct ${name}`);
            }
            if (void 0 === registeredClass.constructor_body) {
              throw new BindingError(`${name} has no accessible constructor`);
            }
            var body = registeredClass.constructor_body[args.length];
            if (void 0 === body) {
              throw new BindingError(`Tried to invoke ctor of ${name} with invalid number of parameters (${args.length}) - expected (${Object.keys(registeredClass.constructor_body).toString()}) parameters instead!`);
            }
            return body.apply(this, args);
          });
          var instancePrototype = Object.create(basePrototype, {
            constructor: {
              value: constructor
            }
          });
          constructor.prototype = instancePrototype;
          var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
          if (registeredClass.baseClass) {
            (_a2 = registeredClass.baseClass).__derivedClasses ?? (_a2.__derivedClasses = []);
            registeredClass.baseClass.__derivedClasses.push(registeredClass);
          }
          var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
          var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
          var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
          replacePublicSymbol(legalFunctionName, constructor);
          return [
            referenceConverter,
            pointerConverter,
            constPointerConverter
          ];
        });
      };
      var heap32VectorToArray = (count, firstElement) => {
        var array = [];
        for (var i2 = 0; i2 < count; i2++) {
          array.push(HEAPU32[firstElement + i2 * 4 >> 2]);
        }
        return array;
      };
      var runDestructors = (destructors) => {
        while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
        }
      };
      function usesDestructorStack(argTypes) {
        for (var i2 = 1; i2 < argTypes.length; ++i2) {
          if (argTypes[i2] !== null && argTypes[i2].destructorFunction === void 0) {
            return true;
          }
        }
        return false;
      }
      function checkArgCount(numArgs, minArgs, maxArgs, humanName, throwBindingError2) {
        if (numArgs < minArgs || numArgs > maxArgs) {
          var argCountMessage = minArgs == maxArgs ? minArgs : `${minArgs} to ${maxArgs}`;
          throwBindingError2(`function ${humanName} called with ${numArgs} arguments, expected ${argCountMessage}`);
        }
      }
      function createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync) {
        var needsDestructorStack = usesDestructorStack(argTypes);
        var argCount = argTypes.length - 2;
        var argsList = [];
        var argsListWired = [
          "fn"
        ];
        if (isClassMethodFunc) {
          argsListWired.push("thisWired");
        }
        for (var i2 = 0; i2 < argCount; ++i2) {
          argsList.push(`arg${i2}`);
          argsListWired.push(`arg${i2}Wired`);
        }
        argsList = argsList.join(",");
        argsListWired = argsListWired.join(",");
        var invokerFnBody = `return function (${argsList}) {
`;
        invokerFnBody += "checkArgCount(arguments.length, minArgs, maxArgs, humanName, throwBindingError);\n";
        if (needsDestructorStack) {
          invokerFnBody += "var destructors = [];\n";
        }
        var dtorStack = needsDestructorStack ? "destructors" : "null";
        var args1 = [
          "humanName",
          "throwBindingError",
          "invoker",
          "fn",
          "runDestructors",
          "retType",
          "classParam"
        ];
        if (isClassMethodFunc) {
          invokerFnBody += `var thisWired = classParam['toWireType'](${dtorStack}, this);
`;
        }
        for (var i2 = 0; i2 < argCount; ++i2) {
          invokerFnBody += `var arg${i2}Wired = argType${i2}['toWireType'](${dtorStack}, arg${i2});
`;
          args1.push(`argType${i2}`);
        }
        invokerFnBody += (returns || isAsync ? "var rv = " : "") + `invoker(${argsListWired});
`;
        if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
        } else {
          for (var i2 = isClassMethodFunc ? 1 : 2; i2 < argTypes.length; ++i2) {
            var paramName = i2 === 1 ? "thisWired" : "arg" + (i2 - 2) + "Wired";
            if (argTypes[i2].destructorFunction !== null) {
              invokerFnBody += `${paramName}_dtor(${paramName});
`;
              args1.push(`${paramName}_dtor`);
            }
          }
        }
        if (returns) {
          invokerFnBody += "var ret = retType['fromWireType'](rv);\nreturn ret;\n";
        }
        invokerFnBody += "}\n";
        args1.push("checkArgCount", "minArgs", "maxArgs");
        invokerFnBody = `if (arguments.length !== ${args1.length}){ throw new Error(humanName + "Expected ${args1.length} closure arguments " + arguments.length + " given."); }
${invokerFnBody}`;
        return [
          args1,
          invokerFnBody
        ];
      }
      function getRequiredArgCount(argTypes) {
        var requiredArgCount = argTypes.length - 2;
        for (var i2 = argTypes.length - 1; i2 >= 2; --i2) {
          if (!argTypes[i2].optional) {
            break;
          }
          requiredArgCount--;
        }
        return requiredArgCount;
      }
      function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {
        var argCount = argTypes.length;
        if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
        }
        assert(!isAsync, "Async bindings are only supported with JSPI.");
        var isClassMethodFunc = argTypes[1] !== null && classType !== null;
        var needsDestructorStack = usesDestructorStack(argTypes);
        var returns = argTypes[0].name !== "void";
        var expectedArgCount = argCount - 2;
        var minArgs = getRequiredArgCount(argTypes);
        var closureArgs = [
          humanName,
          throwBindingError,
          cppInvokerFunc,
          cppTargetFunc,
          runDestructors,
          argTypes[0],
          argTypes[1]
        ];
        for (var i2 = 0; i2 < argCount - 2; ++i2) {
          closureArgs.push(argTypes[i2 + 2]);
        }
        if (!needsDestructorStack) {
          for (var i2 = isClassMethodFunc ? 1 : 2; i2 < argTypes.length; ++i2) {
            if (argTypes[i2].destructorFunction !== null) {
              closureArgs.push(argTypes[i2].destructorFunction);
            }
          }
        }
        closureArgs.push(checkArgCount, minArgs, expectedArgCount);
        let [args, invokerFnBody] = createJsInvoker(argTypes, isClassMethodFunc, returns, isAsync);
        var invokerFn = new Function(...args, invokerFnBody)(...closureArgs);
        return createNamedFunction(humanName, invokerFn);
      }
      var __embind_register_class_constructor = (rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) => {
        assert(argCount > 0);
        var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
        invoker = embind__requireFunction(invokerSignature, invoker);
        whenDependentTypesAreResolved([], [
          rawClassType
        ], (classType) => {
          classType = classType[0];
          var humanName = `constructor ${classType.name}`;
          if (void 0 === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
          }
          if (void 0 !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError(`Cannot register multiple constructors with identical number of parameters (${argCount - 1}) for class '${classType.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);
          }
          classType.registeredClass.constructor_body[argCount - 1] = () => {
            throwUnboundTypeError(`Cannot construct ${classType.name} due to unbound types`, rawArgTypes);
          };
          whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
            argTypes.splice(1, 0, null);
            classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
            return [];
          });
          return [];
        });
      };
      var getFunctionName = (signature) => {
        signature = signature.trim();
        const argsIndex = signature.indexOf("(");
        if (argsIndex === -1)
          return signature;
        assert(signature.endsWith(")"), "Parentheses for argument names should match.");
        return signature.slice(0, argsIndex);
      };
      var __embind_register_class_function = (rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual, isAsync, isNonnullReturn) => {
        var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
        methodName = AsciiToString(methodName);
        methodName = getFunctionName(methodName);
        rawInvoker = embind__requireFunction(invokerSignature, rawInvoker, isAsync);
        whenDependentTypesAreResolved([], [
          rawClassType
        ], (classType) => {
          classType = classType[0];
          var humanName = `${classType.name}.${methodName}`;
          if (methodName.startsWith("@@")) {
            methodName = Symbol[methodName.substring(2)];
          }
          if (isPureVirtual) {
            classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
          function unboundTypesHandler() {
            throwUnboundTypeError(`Cannot call ${humanName} due to unbound types`, rawArgTypes);
          }
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (void 0 === method || void 0 === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
            unboundTypesHandler.argCount = argCount - 2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
          } else {
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
          whenDependentTypesAreResolved([], rawArgTypes, (argTypes) => {
            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
            if (void 0 === proto[methodName].overloadTable) {
              memberFunction.argCount = argCount - 2;
              proto[methodName] = memberFunction;
            } else {
              proto[methodName].overloadTable[argCount - 2] = memberFunction;
            }
            return [];
          });
          return [];
        });
      };
      var emval_freelist = [];
      var emval_handles = [
        0,
        1,
        ,
        1,
        null,
        1,
        true,
        1,
        false,
        1
      ];
      var __emval_decref = (handle) => {
        if (handle > 9 && 0 === --emval_handles[handle + 1]) {
          assert(emval_handles[handle] !== void 0, `Decref for unallocated handle.`);
          emval_handles[handle] = void 0;
          emval_freelist.push(handle);
        }
      };
      var Emval = {
        toValue: (handle) => {
          if (!handle) {
            throwBindingError(`Cannot use deleted val. handle = ${handle}`);
          }
          assert(handle === 2 || emval_handles[handle] !== void 0 && handle % 2 === 0, `invalid handle: ${handle}`);
          return emval_handles[handle];
        },
        toHandle: (value) => {
          switch (value) {
            case void 0:
              return 2;
            case null:
              return 4;
            case true:
              return 6;
            case false:
              return 8;
            default: {
              const handle = emval_freelist.pop() || emval_handles.length;
              emval_handles[handle] = value;
              emval_handles[handle + 1] = 1;
              return handle;
            }
          }
        }
      };
      var EmValType = {
        name: "emscripten::val",
        "fromWireType": (handle) => {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        "toWireType": (destructors, value) => Emval.toHandle(value),
        argPackAdvance: GenericWireTypeSize,
        "readValueFromPointer": readPointer,
        destructorFunction: null
      };
      var __embind_register_emval = (rawType) => registerType(rawType, EmValType);
      var floatReadValueFromPointer = (name, width) => {
        switch (width) {
          case 4:
            return function(pointer) {
              return this["fromWireType"](HEAPF32[pointer >> 2]);
            };
          case 8:
            return function(pointer) {
              return this["fromWireType"](HEAPF64[pointer >> 3]);
            };
          default:
            throw new TypeError(`invalid float width (${width}): ${name}`);
        }
      };
      var __embind_register_float = (rawType, name, size) => {
        name = AsciiToString(name);
        registerType(rawType, {
          name,
          "fromWireType": (value) => value,
          "toWireType": (destructors, value) => {
            if (typeof value != "number" && typeof value != "boolean") {
              throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
            }
            return value;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": floatReadValueFromPointer(name, size),
          destructorFunction: null
        });
      };
      var __embind_register_function = (name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync, isNonnullReturn) => {
        var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
        name = AsciiToString(name);
        name = getFunctionName(name);
        rawInvoker = embind__requireFunction(signature, rawInvoker, isAsync);
        exposePublicSymbol(name, function() {
          throwUnboundTypeError(`Cannot call ${name} due to unbound types`, argTypes);
        }, argCount - 1);
        whenDependentTypesAreResolved([], argTypes, (argTypes2) => {
          var invokerArgsArray = [
            argTypes2[0],
            null
          ].concat(argTypes2.slice(1));
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn, isAsync), argCount - 1);
          return [];
        });
      };
      var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
        name = AsciiToString(name);
        const isUnsignedType = minRange === 0;
        let fromWireType = (value) => value;
        if (isUnsignedType) {
          var bitshift = 32 - 8 * size;
          fromWireType = (value) => value << bitshift >>> bitshift;
          maxRange = fromWireType(maxRange);
        }
        registerType(primitiveType, {
          name,
          "fromWireType": fromWireType,
          "toWireType": (destructors, value) => {
            if (typeof value != "number" && typeof value != "boolean") {
              throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${name}`);
            }
            assertIntegerRange(name, value, minRange, maxRange);
            return value;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": integerReadValueFromPointer(name, size, minRange !== 0),
          destructorFunction: null
        });
      };
      var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
        var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
          BigInt64Array,
          BigUint64Array
        ];
        var TA = typeMapping[dataTypeIndex];
        function decodeMemoryView(handle) {
          var size = HEAPU32[handle >> 2];
          var data = HEAPU32[handle + 4 >> 2];
          return new TA(HEAP8.buffer, data, size);
        }
        name = AsciiToString(name);
        registerType(rawType, {
          name,
          "fromWireType": decodeMemoryView,
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": decodeMemoryView
        }, {
          ignoreDuplicateRegistrations: true
        });
      };
      var EmValOptionalType = Object.assign({
        optional: true
      }, EmValType);
      var __embind_register_optional = (rawOptionalType, rawType) => {
        registerType(rawOptionalType, EmValOptionalType);
      };
      var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
        assert(typeof str === "string", `stringToUTF8Array expects a string (got ${typeof str})`);
        if (!(maxBytesToWrite > 0))
          return 0;
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var u = str.codePointAt(i2);
          if (u <= 127) {
            if (outIdx >= endIdx)
              break;
            heap[outIdx++] = u;
          } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
              break;
            heap[outIdx++] = 192 | u >> 6;
            heap[outIdx++] = 128 | u & 63;
          } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
              break;
            heap[outIdx++] = 224 | u >> 12;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
          } else {
            if (outIdx + 3 >= endIdx)
              break;
            if (u > 1114111)
              warnOnce("Invalid Unicode code point " + ptrToString(u) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).");
            heap[outIdx++] = 240 | u >> 18;
            heap[outIdx++] = 128 | u >> 12 & 63;
            heap[outIdx++] = 128 | u >> 6 & 63;
            heap[outIdx++] = 128 | u & 63;
            i2++;
          }
        }
        heap[outIdx] = 0;
        return outIdx - startIdx;
      };
      var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
        assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      };
      var lengthBytesUTF8 = (str) => {
        var len = 0;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var c = str.charCodeAt(i2);
          if (c <= 127) {
            len++;
          } else if (c <= 2047) {
            len += 2;
          } else if (c >= 55296 && c <= 57343) {
            len += 4;
            ++i2;
          } else {
            len += 3;
          }
        }
        return len;
      };
      var __embind_register_std_string = (rawType, name) => {
        name = AsciiToString(name);
        registerType(rawType, {
          name,
          "fromWireType"(value) {
            var length = HEAPU32[value >> 2];
            var payload = value + 4;
            var str;
            var i2;
            {
              var decodeStartPtr = payload;
              for (var i2 = 0; i2 <= length; ++i2) {
                var currentBytePtr = payload + i2;
                if (i2 == length || HEAPU8[currentBytePtr] == 0) {
                  var maxRead = currentBytePtr - decodeStartPtr;
                  var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                  if (str === void 0) {
                    str = stringSegment;
                  } else {
                    str += String.fromCharCode(0);
                    str += stringSegment;
                  }
                  decodeStartPtr = currentBytePtr + 1;
                }
              }
            }
            _free(value);
            return str;
          },
          "toWireType"(destructors, value) {
            if (value instanceof ArrayBuffer) {
              value = new Uint8Array(value);
            }
            var length;
            var valueIsOfTypeString = typeof value == "string";
            if (!(valueIsOfTypeString || ArrayBuffer.isView(value) && value.BYTES_PER_ELEMENT == 1)) {
              throwBindingError("Cannot pass non-string to std::string");
            }
            if (valueIsOfTypeString) {
              length = lengthBytesUTF8(value);
            } else {
              length = value.length;
            }
            var base = _malloc(4 + length + 1);
            var ptr = base + 4;
            HEAPU32[base >> 2] = length;
            if (valueIsOfTypeString) {
              {
                stringToUTF8(value, ptr, length + 1);
              }
            } else {
              HEAPU8.set(value, ptr);
            }
            if (destructors !== null) {
              destructors.push(_free, base);
            }
            return base;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": readPointer,
          destructorFunction(ptr) {
            _free(ptr);
          }
        });
      };
      var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : void 0;
      var UTF16ToString = (ptr, maxBytesToRead) => {
        assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
        var idx = ptr >> 1;
        var maxIdx = idx + maxBytesToRead / 2;
        var endIdx = idx;
        while (!(endIdx >= maxIdx) && HEAPU16[endIdx])
          ++endIdx;
        if (endIdx - idx > 16 && UTF16Decoder)
          return UTF16Decoder.decode(HEAPU16.subarray(idx, endIdx));
        var str = "";
        for (var i2 = idx; !(i2 >= maxIdx); ++i2) {
          var codeUnit = HEAPU16[i2];
          if (codeUnit == 0)
            break;
          str += String.fromCharCode(codeUnit);
        }
        return str;
      };
      var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
        assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
        assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
        maxBytesToWrite ?? (maxBytesToWrite = 2147483647);
        if (maxBytesToWrite < 2)
          return 0;
        maxBytesToWrite -= 2;
        var startPtr = outPtr;
        var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
        for (var i2 = 0; i2 < numCharsToWrite; ++i2) {
          var codeUnit = str.charCodeAt(i2);
          HEAP16[outPtr >> 1] = codeUnit;
          outPtr += 2;
        }
        HEAP16[outPtr >> 1] = 0;
        return outPtr - startPtr;
      };
      var lengthBytesUTF16 = (str) => str.length * 2;
      var UTF32ToString = (ptr, maxBytesToRead) => {
        assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
        var str = "";
        for (var i2 = 0; !(i2 >= maxBytesToRead / 4); i2++) {
          var utf32 = HEAP32[ptr + i2 * 4 >> 2];
          if (!utf32)
            break;
          str += String.fromCodePoint(utf32);
        }
        return str;
      };
      var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
        assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
        assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
        maxBytesToWrite ?? (maxBytesToWrite = 2147483647);
        if (maxBytesToWrite < 4)
          return 0;
        var startPtr = outPtr;
        var endPtr = startPtr + maxBytesToWrite - 4;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var codePoint = str.codePointAt(i2);
          if (codePoint > 65535) {
            i2++;
          }
          HEAP32[outPtr >> 2] = codePoint;
          outPtr += 4;
          if (outPtr + 4 > endPtr)
            break;
        }
        HEAP32[outPtr >> 2] = 0;
        return outPtr - startPtr;
      };
      var lengthBytesUTF32 = (str) => {
        var len = 0;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var codePoint = str.codePointAt(i2);
          if (codePoint > 65535) {
            i2++;
          }
          len += 4;
        }
        return len;
      };
      var __embind_register_std_wstring = (rawType, charSize, name) => {
        name = AsciiToString(name);
        var decodeString, encodeString, readCharAt, lengthBytesUTF;
        if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          readCharAt = (pointer) => HEAPU16[pointer >> 1];
        } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          readCharAt = (pointer) => HEAPU32[pointer >> 2];
        }
        registerType(rawType, {
          name,
          "fromWireType": (value) => {
            var length = HEAPU32[value >> 2];
            var str;
            var decodeStartPtr = value + 4;
            for (var i2 = 0; i2 <= length; ++i2) {
              var currentBytePtr = value + 4 + i2 * charSize;
              if (i2 == length || readCharAt(currentBytePtr) == 0) {
                var maxReadBytes = currentBytePtr - decodeStartPtr;
                var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                if (str === void 0) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + charSize;
              }
            }
            _free(value);
            return str;
          },
          "toWireType": (destructors, value) => {
            if (!(typeof value == "string")) {
              throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
            }
            var length = lengthBytesUTF(value);
            var ptr = _malloc(4 + length + charSize);
            HEAPU32[ptr >> 2] = length / charSize;
            encodeString(value, ptr + 4, length + charSize);
            if (destructors !== null) {
              destructors.push(_free, ptr);
            }
            return ptr;
          },
          argPackAdvance: GenericWireTypeSize,
          "readValueFromPointer": readPointer,
          destructorFunction(ptr) {
            _free(ptr);
          }
        });
      };
      var __embind_register_void = (rawType, name) => {
        name = AsciiToString(name);
        registerType(rawType, {
          isVoid: true,
          name,
          argPackAdvance: 0,
          "fromWireType": () => void 0,
          "toWireType": (destructors, o) => void 0
        });
      };
      var requireRegisteredType = (rawType, humanName) => {
        var impl = registeredTypes[rawType];
        if (void 0 === impl) {
          throwBindingError(`${humanName} has unknown type ${getTypeName(rawType)}`);
        }
        return impl;
      };
      var emval_returnValue = (returnType, destructorsRef, handle) => {
        var destructors = [];
        var result = returnType["toWireType"](destructors, handle);
        if (destructors.length) {
          HEAPU32[destructorsRef >> 2] = Emval.toHandle(destructors);
        }
        return result;
      };
      var __emval_as = (handle, returnType, destructorsRef) => {
        handle = Emval.toValue(handle);
        returnType = requireRegisteredType(returnType, "emval::as");
        return emval_returnValue(returnType, destructorsRef, handle);
      };
      var emval_symbols = {};
      var getStringOrSymbol = (address) => {
        var symbol = emval_symbols[address];
        if (symbol === void 0) {
          return AsciiToString(address);
        }
        return symbol;
      };
      var emval_methodCallers = [];
      var __emval_call_method = (caller, objHandle, methodName, destructorsRef, args) => {
        caller = emval_methodCallers[caller];
        objHandle = Emval.toValue(objHandle);
        methodName = getStringOrSymbol(methodName);
        return caller(objHandle, objHandle[methodName], destructorsRef, args);
      };
      var emval_addMethodCaller = (caller) => {
        var id = emval_methodCallers.length;
        emval_methodCallers.push(caller);
        return id;
      };
      var emval_lookupTypes = (argCount, argTypes) => {
        var a = new Array(argCount);
        for (var i2 = 0; i2 < argCount; ++i2) {
          a[i2] = requireRegisteredType(HEAPU32[argTypes + i2 * 4 >> 2], `parameter ${i2}`);
        }
        return a;
      };
      var __emval_get_method_caller = (argCount, argTypes, kind) => {
        var types = emval_lookupTypes(argCount, argTypes);
        var retType = types.shift();
        argCount--;
        var functionBody = `return function (obj, func, destructorsRef, args) {
`;
        var offset = 0;
        var argsList = [];
        if (kind === 0) {
          argsList.push("obj");
        }
        var params = [
          "retType"
        ];
        var args = [
          retType
        ];
        for (var i2 = 0; i2 < argCount; ++i2) {
          argsList.push(`arg${i2}`);
          params.push(`argType${i2}`);
          args.push(types[i2]);
          functionBody += `  var arg${i2} = argType${i2}.readValueFromPointer(args${offset ? "+" + offset : ""});
`;
          offset += types[i2].argPackAdvance;
        }
        var invoker = kind === 1 ? "new func" : "func.call";
        functionBody += `  var rv = ${invoker}(${argsList.join(", ")});
`;
        if (!retType.isVoid) {
          params.push("emval_returnValue");
          args.push(emval_returnValue);
          functionBody += "  return emval_returnValue(retType, destructorsRef, rv);\n";
        }
        functionBody += "};\n";
        var invokerFunction = new Function(...params, functionBody)(...args);
        var functionName = `methodCaller<(${types.map((t) => t.name).join(", ")}) => ${retType.name}>`;
        return emval_addMethodCaller(createNamedFunction(functionName, invokerFunction));
      };
      var __emval_get_property = (handle, key) => {
        handle = Emval.toValue(handle);
        key = Emval.toValue(key);
        return Emval.toHandle(handle[key]);
      };
      var __emval_incref = (handle) => {
        if (handle > 9) {
          emval_handles[handle + 1] += 1;
        }
      };
      var __emval_new_array = () => Emval.toHandle([]);
      var __emval_new_cstring = (v) => Emval.toHandle(getStringOrSymbol(v));
      var __emval_new_object = () => Emval.toHandle({});
      var __emval_run_destructors = (handle) => {
        var destructors = Emval.toValue(handle);
        runDestructors(destructors);
        __emval_decref(handle);
      };
      var __emval_set_property = (handle, key, value) => {
        handle = Emval.toValue(handle);
        key = Emval.toValue(key);
        value = Emval.toValue(value);
        handle[key] = value;
      };
      var __emval_take_value = (type, arg) => {
        type = requireRegisteredType(type, "_emval_take_value");
        var v = type["readValueFromPointer"](arg);
        return Emval.toHandle(v);
      };
      var __tzset_js = (timezone, daylight, std_name, dst_name) => {
        var currentYear = (/* @__PURE__ */ new Date()).getFullYear();
        var winter = new Date(currentYear, 0, 1);
        var summer = new Date(currentYear, 6, 1);
        var winterOffset = winter.getTimezoneOffset();
        var summerOffset = summer.getTimezoneOffset();
        var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
        HEAPU32[timezone >> 2] = stdTimezoneOffset * 60;
        HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
        var extractZone = (timezoneOffset) => {
          var sign = timezoneOffset >= 0 ? "-" : "+";
          var absOffset = Math.abs(timezoneOffset);
          var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
          var minutes = String(absOffset % 60).padStart(2, "0");
          return `UTC${sign}${hours}${minutes}`;
        };
        var winterName = extractZone(winterOffset);
        var summerName = extractZone(summerOffset);
        assert(winterName);
        assert(summerName);
        assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
        assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
        if (summerOffset < winterOffset) {
          stringToUTF8(winterName, std_name, 17);
          stringToUTF8(summerName, dst_name, 17);
        } else {
          stringToUTF8(winterName, dst_name, 17);
          stringToUTF8(summerName, std_name, 17);
        }
      };
      var getHeapMax = () => 2147483648;
      var alignMemory = (size, alignment) => {
        assert(alignment, "alignment argument is required");
        return Math.ceil(size / alignment) * alignment;
      };
      var growMemory = (size) => {
        var b = wasmMemory.buffer;
        var pages = (size - b.byteLength + 65535) / 65536 | 0;
        try {
          wasmMemory.grow(pages);
          updateMemoryViews();
          return 1;
        } catch (e) {
          err(`growMemory: Attempted to grow heap from ${b.byteLength} bytes to ${size} bytes, but got error: ${e}`);
        }
      };
      var _emscripten_resize_heap = (requestedSize) => {
        var oldSize = HEAPU8.length;
        requestedSize >>>= 0;
        assert(requestedSize > oldSize);
        var maxHeapSize = getHeapMax();
        if (requestedSize > maxHeapSize) {
          err(`Cannot enlarge memory, requested ${requestedSize} bytes, but the limit is ${maxHeapSize} bytes!`);
          return false;
        }
        for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
          var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
          overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
          var newSize = Math.min(maxHeapSize, alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536));
          var replacement = growMemory(newSize);
          if (replacement) {
            return true;
          }
        }
        err(`Failed to grow the heap from ${oldSize} bytes to ${newSize} bytes, not enough memory!`);
        return false;
      };
      var ENV = {};
      var getExecutableName = () => thisProgram || "./this.program";
      var getEnvStrings = () => {
        if (!getEnvStrings.strings) {
          var lang = (typeof navigator == "object" && navigator.language || "C").replace("-", "_") + ".UTF-8";
          var env = {
            "USER": "web_user",
            "LOGNAME": "web_user",
            "PATH": "/",
            "PWD": "/",
            "HOME": "/home/web_user",
            "LANG": lang,
            "_": getExecutableName()
          };
          for (var x in ENV) {
            if (ENV[x] === void 0)
              delete env[x];
            else
              env[x] = ENV[x];
          }
          var strings = [];
          for (var x in env) {
            strings.push(`${x}=${env[x]}`);
          }
          getEnvStrings.strings = strings;
        }
        return getEnvStrings.strings;
      };
      var _environ_get = (__environ, environ_buf) => {
        var bufSize = 0;
        var envp = 0;
        for (var string of getEnvStrings()) {
          var ptr = environ_buf + bufSize;
          HEAPU32[__environ + envp >> 2] = ptr;
          bufSize += stringToUTF8(string, ptr, Infinity) + 1;
          envp += 4;
        }
        return 0;
      };
      var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
        var strings = getEnvStrings();
        HEAPU32[penviron_count >> 2] = strings.length;
        var bufSize = 0;
        for (var string of strings) {
          bufSize += lengthBytesUTF8(string) + 1;
        }
        HEAPU32[penviron_buf_size >> 2] = bufSize;
        return 0;
      };
      var _fd_close = (fd) => {
        abort("fd_close called without SYSCALLS_REQUIRE_FILESYSTEM");
      };
      function _fd_seek(fd, offset, whence, newOffset) {
        return 70;
      }
      var printCharBuffers = [
        null,
        [],
        []
      ];
      var printChar = (stream, curr) => {
        var buffer = printCharBuffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? out : err)(UTF8ArrayToString(buffer));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      };
      var _fd_write = (fd, iov, iovcnt, pnum) => {
        var num = 0;
        for (var i2 = 0; i2 < iovcnt; i2++) {
          var ptr = HEAPU32[iov >> 2];
          var len = HEAPU32[iov + 4 >> 2];
          iov += 8;
          for (var j = 0; j < len; j++) {
            printChar(fd, HEAPU8[ptr + j]);
          }
          num += len;
        }
        HEAPU32[pnum >> 2] = num;
        return 0;
      };
      var incrementExceptionRefcount = (ex) => {
        var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);
        ___cxa_increment_exception_refcount(ptr);
      };
      var decrementExceptionRefcount = (ex) => {
        var ptr = getCppExceptionThrownObjectFromWebAssemblyException(ex);
        ___cxa_decrement_exception_refcount(ptr);
      };
      for (var base64ReverseLookup = new Uint8Array(123), i = 25; i >= 0; --i) {
        base64ReverseLookup[48 + i] = 52 + i;
        base64ReverseLookup[65 + i] = i;
        base64ReverseLookup[97 + i] = 26 + i;
      }
      base64ReverseLookup[43] = 62;
      base64ReverseLookup[47] = 63;
      init_ClassHandle();
      init_RegisteredPointer();
      assert(emval_handles.length === 5 * 2);
      {
        if (Module["noExitRuntime"])
          Module["noExitRuntime"];
        if (Module["print"])
          out = Module["print"];
        if (Module["printErr"])
          err = Module["printErr"];
        if (Module["wasmBinary"])
          wasmBinary = Module["wasmBinary"];
        Module["FS_createDataFile"] = FS.createDataFile;
        Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
        checkIncomingModuleAPI();
        if (Module["arguments"])
          Module["arguments"];
        if (Module["thisProgram"])
          thisProgram = Module["thisProgram"];
        assert(typeof Module["memoryInitializerPrefixURL"] == "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["pthreadMainPrefixURL"] == "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["cdInitializerPrefixURL"] == "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["filePackagePrefixURL"] == "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module["read"] == "undefined", "Module.read option was removed");
        assert(typeof Module["readAsync"] == "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
        assert(typeof Module["readBinary"] == "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
        assert(typeof Module["setWindowTitle"] == "undefined", "Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)");
        assert(typeof Module["TOTAL_MEMORY"] == "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
        assert(typeof Module["ENVIRONMENT"] == "undefined", "Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)");
        assert(typeof Module["STACK_SIZE"] == "undefined", "STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time");
        assert(typeof Module["wasmMemory"] == "undefined", "Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally");
        assert(typeof Module["INITIAL_MEMORY"] == "undefined", "Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");
      }
      var missingLibrarySymbols = [
        "writeI53ToI64",
        "writeI53ToI64Clamped",
        "writeI53ToI64Signaling",
        "writeI53ToU64Clamped",
        "writeI53ToU64Signaling",
        "readI53FromI64",
        "readI53FromU64",
        "convertI32PairToI53",
        "convertI32PairToI53Checked",
        "convertU32PairToI53",
        "getTempRet0",
        "setTempRet0",
        "zeroMemory",
        "exitJS",
        "withStackSave",
        "strError",
        "inetPton4",
        "inetNtop4",
        "inetPton6",
        "inetNtop6",
        "readSockaddr",
        "writeSockaddr",
        "emscriptenLog",
        "readEmAsmArgs",
        "jstoi_q",
        "autoResumeAudioContext",
        "getDynCaller",
        "dynCall",
        "handleException",
        "keepRuntimeAlive",
        "runtimeKeepalivePush",
        "runtimeKeepalivePop",
        "callUserCallback",
        "maybeExit",
        "asmjsMangle",
        "asyncLoad",
        "mmapAlloc",
        "HandleAllocator",
        "getNativeTypeSize",
        "getUniqueRunDependency",
        "addOnInit",
        "addOnPostCtor",
        "addOnPreMain",
        "addOnExit",
        "STACK_SIZE",
        "STACK_ALIGN",
        "POINTER_SIZE",
        "ASSERTIONS",
        "ccall",
        "cwrap",
        "uleb128Encode",
        "sigToWasmTypes",
        "generateFuncType",
        "convertJsFunctionToWasm",
        "getEmptyTableSlot",
        "updateTableMap",
        "getFunctionAddress",
        "addFunction",
        "removeFunction",
        "reallyNegative",
        "unSign",
        "strLen",
        "reSign",
        "formatString",
        "intArrayFromString",
        "intArrayToString",
        "stringToAscii",
        "stringToNewUTF8",
        "stringToUTF8OnStack",
        "writeArrayToMemory",
        "registerKeyEventCallback",
        "maybeCStringToJsString",
        "findEventTarget",
        "getBoundingClientRect",
        "fillMouseEventData",
        "registerMouseEventCallback",
        "registerWheelEventCallback",
        "registerUiEventCallback",
        "registerFocusEventCallback",
        "fillDeviceOrientationEventData",
        "registerDeviceOrientationEventCallback",
        "fillDeviceMotionEventData",
        "registerDeviceMotionEventCallback",
        "screenOrientation",
        "fillOrientationChangeEventData",
        "registerOrientationChangeEventCallback",
        "fillFullscreenChangeEventData",
        "registerFullscreenChangeEventCallback",
        "JSEvents_requestFullscreen",
        "JSEvents_resizeCanvasForFullscreen",
        "registerRestoreOldStyle",
        "hideEverythingExceptGivenElement",
        "restoreHiddenElements",
        "setLetterbox",
        "softFullscreenResizeWebGLRenderTarget",
        "doRequestFullscreen",
        "fillPointerlockChangeEventData",
        "registerPointerlockChangeEventCallback",
        "registerPointerlockErrorEventCallback",
        "requestPointerLock",
        "fillVisibilityChangeEventData",
        "registerVisibilityChangeEventCallback",
        "registerTouchEventCallback",
        "fillGamepadEventData",
        "registerGamepadEventCallback",
        "registerBeforeUnloadEventCallback",
        "fillBatteryEventData",
        "battery",
        "registerBatteryEventCallback",
        "setCanvasElementSize",
        "getCanvasElementSize",
        "jsStackTrace",
        "getCallstack",
        "convertPCtoSourceLocation",
        "checkWasiClock",
        "wasiRightsToMuslOFlags",
        "wasiOFlagsToMuslOFlags",
        "initRandomFill",
        "randomFill",
        "safeSetTimeout",
        "setImmediateWrapped",
        "safeRequestAnimationFrame",
        "clearImmediateWrapped",
        "registerPostMainLoop",
        "registerPreMainLoop",
        "getPromise",
        "makePromise",
        "idsToPromises",
        "makePromiseCallback",
        "Browser_asyncPrepareDataCounter",
        "isLeapYear",
        "ydayFromDate",
        "arraySum",
        "addDays",
        "getSocketFromFD",
        "getSocketAddress",
        "FS_createPreloadedFile",
        "FS_modeStringToFlags",
        "FS_getMode",
        "FS_stdin_getChar",
        "FS_mkdirTree",
        "_setNetworkCallback",
        "heapObjectForWebGLType",
        "toTypedArrayIndex",
        "webgl_enable_ANGLE_instanced_arrays",
        "webgl_enable_OES_vertex_array_object",
        "webgl_enable_WEBGL_draw_buffers",
        "webgl_enable_WEBGL_multi_draw",
        "webgl_enable_EXT_polygon_offset_clamp",
        "webgl_enable_EXT_clip_control",
        "webgl_enable_WEBGL_polygon_mode",
        "emscriptenWebGLGet",
        "computeUnpackAlignedImageSize",
        "colorChannelsInGlTextureFormat",
        "emscriptenWebGLGetTexPixelData",
        "emscriptenWebGLGetUniform",
        "webglGetUniformLocation",
        "webglPrepareUniformLocationsBeforeFirstUse",
        "webglGetLeftBracePos",
        "emscriptenWebGLGetVertexAttrib",
        "__glGetActiveAttribOrUniform",
        "writeGLArray",
        "registerWebGlEventCallback",
        "runAndAbortIfError",
        "ALLOC_NORMAL",
        "ALLOC_STACK",
        "allocate",
        "writeStringToMemory",
        "writeAsciiToMemory",
        "demangle",
        "stackTrace",
        "getFunctionArgsName",
        "createJsInvokerSignature",
        "PureVirtualError",
        "registerInheritedInstance",
        "unregisterInheritedInstance",
        "getInheritedInstanceCount",
        "getLiveInheritedInstances",
        "enumReadValueFromPointer",
        "setDelayFunction",
        "validateThis",
        "count_emval_handles",
        "emval_get_global"
      ];
      missingLibrarySymbols.forEach(missingLibrarySymbol);
      var unexportedSymbols = [
        "run",
        "addRunDependency",
        "removeRunDependency",
        "out",
        "err",
        "callMain",
        "abort",
        "wasmMemory",
        "wasmExports",
        "HEAPF32",
        "HEAPF64",
        "HEAP8",
        "HEAPU8",
        "HEAP16",
        "HEAPU16",
        "HEAP32",
        "HEAPU32",
        "HEAP64",
        "HEAPU64",
        "writeStackCookie",
        "checkStackCookie",
        "INT53_MAX",
        "INT53_MIN",
        "bigintToI53Checked",
        "stackSave",
        "stackRestore",
        "stackAlloc",
        "ptrToString",
        "getHeapMax",
        "growMemory",
        "ENV",
        "ERRNO_CODES",
        "DNS",
        "Protocols",
        "Sockets",
        "timers",
        "warnOnce",
        "readEmAsmArgsArray",
        "getExecutableName",
        "alignMemory",
        "wasmTable",
        "noExitRuntime",
        "addOnPreRun",
        "addOnPostRun",
        "freeTableIndexes",
        "functionsInTableMap",
        "setValue",
        "getValue",
        "PATH",
        "PATH_FS",
        "UTF8Decoder",
        "UTF8ArrayToString",
        "UTF8ToString",
        "stringToUTF8Array",
        "stringToUTF8",
        "lengthBytesUTF8",
        "AsciiToString",
        "UTF16Decoder",
        "UTF16ToString",
        "stringToUTF16",
        "lengthBytesUTF16",
        "UTF32ToString",
        "stringToUTF32",
        "lengthBytesUTF32",
        "JSEvents",
        "specialHTMLTargets",
        "findCanvasEventTarget",
        "currentFullscreenStrategy",
        "restoreOldWindowedStyle",
        "UNWIND_CACHE",
        "ExitStatus",
        "getEnvStrings",
        "flush_NO_FILESYSTEM",
        "emSetImmediate",
        "emClearImmediate_deps",
        "emClearImmediate",
        "promiseMap",
        "getExceptionMessageCommon",
        "getCppExceptionTag",
        "getCppExceptionThrownObjectFromWebAssemblyException",
        "Browser",
        "requestFullscreen",
        "requestFullScreen",
        "setCanvasSize",
        "getUserMedia",
        "createContext",
        "getPreloadedImageData__data",
        "wget",
        "MONTH_DAYS_REGULAR",
        "MONTH_DAYS_LEAP",
        "MONTH_DAYS_REGULAR_CUMULATIVE",
        "MONTH_DAYS_LEAP_CUMULATIVE",
        "base64Decode",
        "SYSCALLS",
        "preloadPlugins",
        "FS_stdin_getChar_buffer",
        "FS_unlink",
        "FS_createPath",
        "FS_createDevice",
        "FS_readFile",
        "FS",
        "FS_root",
        "FS_mounts",
        "FS_devices",
        "FS_streams",
        "FS_nextInode",
        "FS_nameTable",
        "FS_currentPath",
        "FS_initialized",
        "FS_ignorePermissions",
        "FS_filesystems",
        "FS_syncFSRequests",
        "FS_readFiles",
        "FS_lookupPath",
        "FS_getPath",
        "FS_hashName",
        "FS_hashAddNode",
        "FS_hashRemoveNode",
        "FS_lookupNode",
        "FS_createNode",
        "FS_destroyNode",
        "FS_isRoot",
        "FS_isMountpoint",
        "FS_isFile",
        "FS_isDir",
        "FS_isLink",
        "FS_isChrdev",
        "FS_isBlkdev",
        "FS_isFIFO",
        "FS_isSocket",
        "FS_flagsToPermissionString",
        "FS_nodePermissions",
        "FS_mayLookup",
        "FS_mayCreate",
        "FS_mayDelete",
        "FS_mayOpen",
        "FS_checkOpExists",
        "FS_nextfd",
        "FS_getStreamChecked",
        "FS_getStream",
        "FS_createStream",
        "FS_closeStream",
        "FS_dupStream",
        "FS_doSetAttr",
        "FS_chrdev_stream_ops",
        "FS_major",
        "FS_minor",
        "FS_makedev",
        "FS_registerDevice",
        "FS_getDevice",
        "FS_getMounts",
        "FS_syncfs",
        "FS_mount",
        "FS_unmount",
        "FS_lookup",
        "FS_mknod",
        "FS_statfs",
        "FS_statfsStream",
        "FS_statfsNode",
        "FS_create",
        "FS_mkdir",
        "FS_mkdev",
        "FS_symlink",
        "FS_rename",
        "FS_rmdir",
        "FS_readdir",
        "FS_readlink",
        "FS_stat",
        "FS_fstat",
        "FS_lstat",
        "FS_doChmod",
        "FS_chmod",
        "FS_lchmod",
        "FS_fchmod",
        "FS_doChown",
        "FS_chown",
        "FS_lchown",
        "FS_fchown",
        "FS_doTruncate",
        "FS_truncate",
        "FS_ftruncate",
        "FS_utime",
        "FS_open",
        "FS_close",
        "FS_isClosed",
        "FS_llseek",
        "FS_read",
        "FS_write",
        "FS_mmap",
        "FS_msync",
        "FS_ioctl",
        "FS_writeFile",
        "FS_cwd",
        "FS_chdir",
        "FS_createDefaultDirectories",
        "FS_createDefaultDevices",
        "FS_createSpecialDirectories",
        "FS_createStandardStreams",
        "FS_staticInit",
        "FS_init",
        "FS_quit",
        "FS_findObject",
        "FS_analyzePath",
        "FS_createFile",
        "FS_createDataFile",
        "FS_forceLoadFile",
        "FS_createLazyFile",
        "FS_absolutePath",
        "FS_createFolder",
        "FS_createLink",
        "FS_joinPath",
        "FS_mmapAlloc",
        "FS_standardizePath",
        "MEMFS",
        "TTY",
        "PIPEFS",
        "SOCKFS",
        "tempFixedLengthArray",
        "miniTempWebGLFloatBuffers",
        "miniTempWebGLIntBuffers",
        "GL",
        "AL",
        "GLUT",
        "EGL",
        "GLEW",
        "IDBStore",
        "SDL",
        "SDL_gfx",
        "allocateUTF8",
        "allocateUTF8OnStack",
        "print",
        "printErr",
        "jstoi_s",
        "InternalError",
        "BindingError",
        "throwInternalError",
        "throwBindingError",
        "registeredTypes",
        "awaitingDependencies",
        "typeDependencies",
        "tupleRegistrations",
        "structRegistrations",
        "sharedRegisterType",
        "whenDependentTypesAreResolved",
        "getTypeName",
        "getFunctionName",
        "heap32VectorToArray",
        "requireRegisteredType",
        "usesDestructorStack",
        "checkArgCount",
        "getRequiredArgCount",
        "createJsInvoker",
        "UnboundTypeError",
        "GenericWireTypeSize",
        "EmValType",
        "EmValOptionalType",
        "throwUnboundTypeError",
        "ensureOverloadTable",
        "exposePublicSymbol",
        "replacePublicSymbol",
        "createNamedFunction",
        "embindRepr",
        "registeredInstances",
        "getBasestPointer",
        "getInheritedInstance",
        "registeredPointers",
        "registerType",
        "integerReadValueFromPointer",
        "floatReadValueFromPointer",
        "assertIntegerRange",
        "readPointer",
        "runDestructors",
        "craftInvokerFunction",
        "embind__requireFunction",
        "genericPointerToWireType",
        "constNoSmartPtrRawPointerToWireType",
        "nonConstNoSmartPtrRawPointerToWireType",
        "init_RegisteredPointer",
        "RegisteredPointer",
        "RegisteredPointer_fromWireType",
        "runDestructor",
        "releaseClassHandle",
        "finalizationRegistry",
        "detachFinalizer_deps",
        "detachFinalizer",
        "attachFinalizer",
        "makeClassHandle",
        "init_ClassHandle",
        "ClassHandle",
        "throwInstanceAlreadyDeleted",
        "deletionQueue",
        "flushPendingDeletes",
        "delayFunction",
        "RegisteredClass",
        "shallowCopyInternalPointer",
        "downcastPointer",
        "upcastPointer",
        "char_0",
        "char_9",
        "makeLegalFunctionName",
        "emval_freelist",
        "emval_handles",
        "emval_symbols",
        "getStringOrSymbol",
        "Emval",
        "emval_returnValue",
        "emval_lookupTypes",
        "emval_methodCallers",
        "emval_addMethodCaller"
      ];
      unexportedSymbols.forEach(unexportedRuntimeSymbol);
      Module["getExceptionMessage"] = getExceptionMessage;
      Module["incrementExceptionRefcount"] = incrementExceptionRefcount;
      Module["decrementExceptionRefcount"] = decrementExceptionRefcount;
      function checkIncomingModuleAPI() {
        ignoredModuleProp("fetchSettings");
      }
      var ___getTypeName = makeInvalidEarlyAccess("___getTypeName");
      var _malloc = makeInvalidEarlyAccess("_malloc");
      var _free = makeInvalidEarlyAccess("_free");
      var _emscripten_stack_get_end = makeInvalidEarlyAccess("_emscripten_stack_get_end");
      var ___trap = makeInvalidEarlyAccess("___trap");
      var _emscripten_stack_init = makeInvalidEarlyAccess("_emscripten_stack_init");
      var __emscripten_stack_restore = makeInvalidEarlyAccess("__emscripten_stack_restore");
      var __emscripten_stack_alloc = makeInvalidEarlyAccess("__emscripten_stack_alloc");
      var _emscripten_stack_get_current = makeInvalidEarlyAccess("_emscripten_stack_get_current");
      var ___cxa_decrement_exception_refcount = makeInvalidEarlyAccess("___cxa_decrement_exception_refcount");
      var ___cxa_increment_exception_refcount = makeInvalidEarlyAccess("___cxa_increment_exception_refcount");
      var ___thrown_object_from_unwind_exception = makeInvalidEarlyAccess("___thrown_object_from_unwind_exception");
      var ___get_exception_message = makeInvalidEarlyAccess("___get_exception_message");
      function assignWasmExports(wasmExports2) {
        ___getTypeName = createExportWrapper("__getTypeName", 1);
        _malloc = createExportWrapper("malloc", 1);
        _free = createExportWrapper("free", 1);
        _emscripten_stack_get_end = wasmExports2["emscripten_stack_get_end"];
        wasmExports2["emscripten_stack_get_base"];
        ___trap = wasmExports2["__trap"];
        _emscripten_stack_init = wasmExports2["emscripten_stack_init"];
        wasmExports2["emscripten_stack_get_free"];
        __emscripten_stack_restore = wasmExports2["_emscripten_stack_restore"];
        __emscripten_stack_alloc = wasmExports2["_emscripten_stack_alloc"];
        _emscripten_stack_get_current = wasmExports2["emscripten_stack_get_current"];
        ___cxa_decrement_exception_refcount = createExportWrapper("__cxa_decrement_exception_refcount", 1);
        ___cxa_increment_exception_refcount = createExportWrapper("__cxa_increment_exception_refcount", 1);
        ___thrown_object_from_unwind_exception = createExportWrapper("__thrown_object_from_unwind_exception", 1);
        ___get_exception_message = createExportWrapper("__get_exception_message", 3);
      }
      var ___cpp_exception;
      var wasmImports = {
        __assert_fail: ___assert_fail,
        __throw_exception_with_stack_trace: ___throw_exception_with_stack_trace,
        _abort_js: __abort_js,
        _embind_register_bigint: __embind_register_bigint,
        _embind_register_bool: __embind_register_bool,
        _embind_register_class: __embind_register_class,
        _embind_register_class_constructor: __embind_register_class_constructor,
        _embind_register_class_function: __embind_register_class_function,
        _embind_register_emval: __embind_register_emval,
        _embind_register_float: __embind_register_float,
        _embind_register_function: __embind_register_function,
        _embind_register_integer: __embind_register_integer,
        _embind_register_memory_view: __embind_register_memory_view,
        _embind_register_optional: __embind_register_optional,
        _embind_register_std_string: __embind_register_std_string,
        _embind_register_std_wstring: __embind_register_std_wstring,
        _embind_register_void: __embind_register_void,
        _emval_as: __emval_as,
        _emval_call_method: __emval_call_method,
        _emval_decref: __emval_decref,
        _emval_get_method_caller: __emval_get_method_caller,
        _emval_get_property: __emval_get_property,
        _emval_incref: __emval_incref,
        _emval_new_array: __emval_new_array,
        _emval_new_cstring: __emval_new_cstring,
        _emval_new_object: __emval_new_object,
        _emval_run_destructors: __emval_run_destructors,
        _emval_set_property: __emval_set_property,
        _emval_take_value: __emval_take_value,
        _tzset_js: __tzset_js,
        emscripten_resize_heap: _emscripten_resize_heap,
        environ_get: _environ_get,
        environ_sizes_get: _environ_sizes_get,
        fd_close: _fd_close,
        fd_seek: _fd_seek,
        fd_write: _fd_write
      };
      var wasmExports = await createWasm();
      var calledRun;
      function stackCheckInit() {
        _emscripten_stack_init();
        writeStackCookie();
      }
      function run() {
        if (runDependencies > 0) {
          dependenciesFulfilled = run;
          return;
        }
        stackCheckInit();
        preRun();
        if (runDependencies > 0) {
          dependenciesFulfilled = run;
          return;
        }
        function doRun() {
          var _a2;
          assert(!calledRun);
          calledRun = true;
          Module["calledRun"] = true;
          if (ABORT)
            return;
          initRuntime();
          readyPromiseResolve == null ? void 0 : readyPromiseResolve(Module);
          (_a2 = Module["onRuntimeInitialized"]) == null ? void 0 : _a2.call(Module);
          consumedModuleProp("onRuntimeInitialized");
          assert(!Module["_main"], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');
          postRun();
        }
        if (Module["setStatus"]) {
          Module["setStatus"]("Running...");
          setTimeout(() => {
            setTimeout(() => Module["setStatus"](""), 1);
            doRun();
          }, 1);
        } else {
          doRun();
        }
        checkStackCookie();
      }
      function preInit() {
        if (Module["preInit"]) {
          if (typeof Module["preInit"] == "function")
            Module["preInit"] = [
              Module["preInit"]
            ];
          while (Module["preInit"].length > 0) {
            Module["preInit"].shift()();
          }
        }
        consumedModuleProp("preInit");
      }
      preInit();
      run();
      if (runtimeInitialized) {
        moduleRtn = Module;
      } else {
        moduleRtn = new Promise((resolve, reject) => {
          readyPromiseResolve = resolve;
          readyPromiseReject = reject;
        });
      }
      for (const prop of Object.keys(Module)) {
        if (!(prop in moduleArg)) {
          Object.defineProperty(moduleArg, prop, {
            configurable: true,
            get() {
              abort(`Access to module property ('${prop}') is no longer possible via the module constructor argument; Instead, use the result of the module constructor.`);
            }
          });
        }
      }
      return moduleRtn;
    };
  })();
})();
export {
  __tla,
  hnswlib as default
};
